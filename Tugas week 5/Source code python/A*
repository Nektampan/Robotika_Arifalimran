import heapq
import math

class Node:
    def __init__(self, position, g=0, h=0):
        self.position = position
        self.g = g  # Biaya dari start
        self.h = h  # Heuristic (estimasi ke tujuan)
        self.f = g + h  # Total biaya
        self.parent = None
    
    def __lt__(self, other):
        return self.f < other.f

def euclidean_distance(a, b):
    return math.sqrt((a[0] - b[0])**2 + (a[1] - b[1])**2)

def astar(grid, start, goal):
    rows, cols = len(grid), len(grid[0])
    
    # Inisialisasi node start dan goal
    start_node = Node(start, h=euclidean_distance(start, goal))
    goal_node = Node(goal)
    
    # Set untuk tracking node yang sudah diperiksa
    open_set = []
    closed_set = set()
    
    heapq.heappush(open_set, start_node)
    
    # Arah pergerakan (atas, kanan, bawah, kiri)
    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]
    
    while open_set:
        current = heapq.heappop(open_set)
        
        # Cek apakah sudah mencapai goal
        if current.position == goal:
            path = []
            while current:
                path.append(current.position)
                current = current.parent
            return path[::-1]
        
        closed_set.add(current.position)
        
        # Cek tetangga
        for dx, dy in directions:
            new_x, new_y = current.position[0] + dx, current.position[1] + dy
            
            # Cek batasan grid dan rintangan
            if (0 <= new_x < rows and 0 <= new_y < cols and 
                grid[new_x][new_y] != 1 and (new_x, new_y) not in closed_set):
                
                new_node = Node((new_x, new_y), 
                                g=current.g + 1, 
                                h=euclidean_distance((new_x, new_y), goal))
                new_node.parent = current
                
                # Cek apakah node sudah ada di open_set
                existing_node = next((n for n in open_set if n.position == new_node.position), None)
                
                if existing_node is None:
                    heapq.heappush(open_set, new_node)
                elif new_node.g < existing_node.g:
                    open_set.remove(existing_node)
                    heapq.heappush(open_set, new_node)
    
    return None  # Tidak ada jalur

# Contoh penggunaan
def main():
    # 0 adalah jalur kosong, 1 adalah rintangan
    grid = [
        [0, 0, 0, 0, 1],
        [1, 1, 0, 0, 0],
        [0, 0, 0, 1, 0],
        [0, 1, 1, 1, 0],
        [0, 0, 0, 1, 0]
    ]
    
    start = (0, 0)
    goal = (4, 4)
    
    path = astar(grid, start, goal)
    print("Jalur yang ditemukan:", path)

if __name__ == "__main__":
    main()
